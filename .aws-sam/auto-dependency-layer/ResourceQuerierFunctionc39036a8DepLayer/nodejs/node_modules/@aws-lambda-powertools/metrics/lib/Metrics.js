"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricUnits = exports.Metrics = void 0;
const config_1 = require("./config");
const types_1 = require("./types");
Object.defineProperty(exports, "MetricUnits", { enumerable: true, get: function () { return types_1.MetricUnits; } });
const MAX_METRICS_SIZE = 100;
const MAX_DIMENSION_COUNT = 9;
const DEFAULT_NAMESPACE = 'default_namespace';
/**
 * ## Intro
 * Metrics creates custom metrics asynchronously by logging metrics to standard output following Amazon CloudWatch Embedded Metric Format (EMF).
 *
 * These metrics can be visualized through Amazon CloudWatch Console.
 *
 * ## Key features
 *   * Aggregate up to 100 metrics using a single CloudWatch EMF object (large JSON blob)
 *   * Validate against common metric definitions mistakes (metric unit, values, max dimensions, max metrics, etc)
 *   * Metrics are created asynchronously by CloudWatch service, no custom stacks needed
 *   * Context manager to create a one off metric with a different dimension
 *
 * ## Usage
 *
 * ### Object oriented way with decorator
 *
 * If you are used to TypeScript Class usage to encapsulate your Lambda handler you can leverage the [@metrics.logMetrics()](./_aws_lambda_powertools_metrics.Metrics.html#logMetrics) decorator to automatically:
 *   * create cold start metric
 *   * flush buffered metrics
 *   * throw on empty metrics
 *
 * @example
 *
 * ```typescript
 * import { Metrics, MetricUnits } from '@aws-lambda-powertools/metrics';
 * import { Callback, Context } from 'aws-lambda';
 *
 * const metrics = new Metrics({ namespace:'MyService', serviceName:'withDecorator' });
 *
 * export class MyFunctionWithDecorator {
 *
 *   // FYI: Decorator might not render properly in VSCode mouse over due to https://github.com/microsoft/TypeScript/issues/39371 and might show as *@metrics* instead of `@metrics.logMetrics`
 *
 *   @metrics.logMetrics({ captureColdStartMetric: true, throwOnEmptyMetrics: true })
 *   public handler(_event: any, _context: Context, _callback: Callback<any>): void | Promise<void> {
 *    // ...
 *    metrics.addMetric('test-metric', MetricUnits.Count, 10);
 *    // ...
 *   }
 * }
 *
 * export const handlerClass = new MyFunctionWithDecorator();
 * export const handler = handlerClass.handler;
 * ```
 *
 * ### Standard function
 *
 * If you are used to classic JavaScript functions, you can leverage the different methods provided to create and publish metrics.
 *
 * @example
 *
 * ```typescript
 * import { Metrics, MetricUnits } from '@aws-lambda-powertools/metrics';
 *
 * const metrics = new Metrics({ namespace: 'MyService', serviceName: 'MyFunction' });
 *
 * export const handler = async (_event: any, _context: any): Promise<void> => {
 *   metrics.captureColdStartMetric();
 *   metrics.addMetric('test-metric', MetricUnits.Count, 10);
 *   metrics.publishStoredMetrics();
 * };
 * ```
 */
class Metrics {
    constructor(options = {}) {
        this.defaultDimensions = {};
        this.dimensions = {};
        this.isColdStart = true;
        this.isSingleMetric = false;
        this.metadata = {};
        this.shouldThrowOnEmptyMetrics = false;
        this.storedMetrics = {};
        this.dimensions = {};
        this.setOptions(options);
    }
    /**
     * Add a dimension to the metrics.
     * A dimension is a key-value pair that is used to group metrics.
     * @see https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Dimension for more details.
     * @param name
     * @param value
     */
    addDimension(name, value) {
        if (MAX_DIMENSION_COUNT <= this.getCurrentDimensionsCount()) {
            throw new RangeError(`The number of metric dimensions must be lower than ${MAX_DIMENSION_COUNT}`);
        }
        this.dimensions[name] = value;
    }
    /**
     * Add multiple dimensions to the metrics.
     * @param dimensions
     */
    addDimensions(dimensions) {
        const newDimensions = { ...this.dimensions };
        Object.keys(dimensions).forEach((dimensionName) => {
            newDimensions[dimensionName] = dimensions[dimensionName];
        });
        if (Object.keys(newDimensions).length > MAX_DIMENSION_COUNT) {
            throw new RangeError(`Unable to add ${Object.keys(dimensions).length} dimensions: the number of metric dimensions must be lower than ${MAX_DIMENSION_COUNT}`);
        }
        this.dimensions = newDimensions;
    }
    /**
     * A high-cardinality data part of your Metrics log. This is useful when you want to search highly contextual information along with your metrics in your logs.
     * @param key
     * @param value
     */
    addMetadata(key, value) {
        this.metadata[key] = value;
    }
    /**
     * Add a metric to the metrics buffer.
     * @param name
     * @param unit
     * @param value
     */
    addMetric(name, unit, value) {
        this.storeMetric(name, unit, value);
        if (this.isSingleMetric)
            this.publishStoredMetrics();
    }
    /**
     * Create a singleMetric to capture cold start.
     * If it's a cold start invocation, this feature will:
     *   * Create a separate EMF blob solely containing a metric named ColdStart
     *   * Add function_name and service dimensions
     *
     * This has the advantage of keeping cold start metric separate from your application metrics, where you might have unrelated dimensions.
     *
     * @example
     *
     * ```typescript
     * import { Metrics } from '@aws-lambda-powertools/metrics';
     * import { Context } from 'aws-lambda';
     *
     * const metrics = new Metrics({ namespace:'serverlessAirline', serviceName:'orders' });
     *
     * export const handler = async (event: any, context: Context): Promise<void> => {
     *     metrics.captureColdStartMetric();
     * };
     * ```
     */
    captureColdStartMetric() {
        if (!this.isColdStart)
            return;
        this.isColdStart = false;
        const singleMetric = this.singleMetric();
        if (this.dimensions.service) {
            singleMetric.addDimension('service', this.dimensions.service);
        }
        if (this.functionName != null) {
            singleMetric.addDimension('function_name', this.functionName);
        }
        singleMetric.addMetric('ColdStart', types_1.MetricUnits.Count, 1);
    }
    clearDefaultDimensions() {
        this.defaultDimensions = {};
    }
    clearDimensions() {
        this.dimensions = {};
    }
    clearMetadata() {
        this.metadata = {};
    }
    clearMetrics() {
        this.storedMetrics = {};
    }
    /**
     * A decorator automating coldstart capture, throw on empty metrics and publishing metrics on handler exit.
     *
     * @example
     *
     * ```typescript
     * import { Metrics } from '@aws-lambda-powertools/metrics';
     * import { Callback, Context } from 'aws-lambda';
     *
     * const metrics = new Metrics({ namespace:'CdkExample', serviceName:'withDecorator' });
     *
     * export class MyFunctionWithDecorator {
     *
     *   @metrics.logMetrics({ captureColdStartMetric: true })
     *   public handler(_event: any, _context: Context, _callback: Callback<any>): void | Promise<any> {
     *    // ...
     *   }
     * }
     *
     * export const handlerClass = new MyFunctionWithDecorator();
     * export const handler = handlerClass.handler;
     * ```
     *
     * @decorator Class
     */
    logMetrics(options = {}) {
        const { throwOnEmptyMetrics, defaultDimensions, captureColdStartMetric } = options;
        if (throwOnEmptyMetrics) {
            this.throwOnEmptyMetrics();
        }
        if (defaultDimensions !== undefined) {
            this.setDefaultDimensions(defaultDimensions);
        }
        return (target, _propertyKey, descriptor) => {
            const originalMethod = descriptor.value;
            descriptor.value = (async (event, context, callback) => {
                this.functionName = context.functionName;
                if (captureColdStartMetric)
                    this.captureColdStartMetric();
                let result;
                try {
                    result = await originalMethod?.apply(target, [event, context, callback]);
                }
                catch (error) {
                    throw error;
                }
                finally {
                    this.publishStoredMetrics();
                }
                return result;
            });
            return descriptor;
        };
    }
    /**
     * Synchronous function to actually publish your metrics. (Not needed if using logMetrics decorator).
     * It will create a new EMF blob and log it to standard output to be then ingested by Cloudwatch logs and processed automatically for metrics creation.
     *
     * @example
     *
     * ```typescript
     * import { Metrics, MetricUnits } from '@aws-lambda-powertools/metrics';
     *
     * const metrics = new Metrics({ namespace: 'CdkExample', serviceName: 'MyFunction' }); // Sets metric namespace, and service as a metric dimension
     *
     * export const handler = async (_event: any, _context: any): Promise<void> => {
     *   metrics.addMetric('test-metric', MetricUnits.Count, 10);
     *   metrics.publishStoredMetrics();
     * };
     * ```
     */
    publishStoredMetrics() {
        const target = this.serializeMetrics();
        console.log(JSON.stringify(target));
        this.storedMetrics = {};
    }
    /**
     * Function to create the right object compliant with Cloudwatch EMF (Event Metric Format).
     * @see https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Embedded_Metric_Format_Specification.html for more details
     * @returns {string}
     */
    serializeMetrics() {
        const metricDefinitions = Object.values(this.storedMetrics).map((metricDefinition) => ({
            Name: metricDefinition.name,
            Unit: metricDefinition.unit,
        }));
        if (metricDefinitions.length === 0 && this.shouldThrowOnEmptyMetrics) {
            throw new RangeError('The number of metrics recorded must be higher than zero');
        }
        if (!this.namespace)
            console.warn('Namespace should be defined, default used');
        const metricValues = Object.values(this.storedMetrics).reduce((result, { name, value }) => {
            result[name] = value;
            return result;
        }, {});
        const dimensionNames = [...Object.keys(this.defaultDimensions), ...Object.keys(this.dimensions)];
        return {
            _aws: {
                Timestamp: new Date().getTime(),
                CloudWatchMetrics: [
                    {
                        Namespace: this.namespace || DEFAULT_NAMESPACE,
                        Dimensions: [dimensionNames],
                        Metrics: metricDefinitions,
                    },
                ],
            },
            ...this.defaultDimensions,
            ...this.dimensions,
            ...metricValues,
            ...this.metadata,
        };
    }
    setDefaultDimensions(dimensions) {
        const targetDimensions = {
            ...this.defaultDimensions,
            ...dimensions,
        };
        if (MAX_DIMENSION_COUNT <= Object.keys(targetDimensions).length) {
            throw new Error('Max dimension count hit');
        }
        this.defaultDimensions = targetDimensions;
    }
    setFunctionName(value) {
        this.functionName = value;
    }
    /**
     * CloudWatch EMF uses the same dimensions across all your metrics. Use singleMetric if you have a metric that should have different dimensions.
     *
     * You don't need to call publishStoredMetrics() after calling addMetric for a singleMetrics, they will be flushed directly.
     *
     * @example
     *
     * ```typescript
     * const singleMetric = metrics.singleMetric();
     * singleMetric.addDimension('InnerDimension', 'true');
     * singleMetric.addMetric('single-metric', MetricUnits.Percent, 50);
     * ```
     *
     * @returns the Metrics
     */
    singleMetric() {
        return new Metrics({
            namespace: this.namespace,
            serviceName: this.dimensions.service,
            defaultDimensions: this.defaultDimensions,
            singleMetric: true,
        });
    }
    /**
     * Throw an Error if the metrics buffer is empty.
     *
     * @example
     *
     * ```typescript
     * import { Metrics } from '@aws-lambda-powertools/metrics';
     * import { Context } from 'aws-lambda';
     *
     * const metrics = new Metrics({ namespace:'serverlessAirline', serviceName:'orders' });
     *
     * export const handler = async (event: any, context: Context): Promise<void> => {
     *     metrics.throwOnEmptyMetrics();
     *     metrics.publishStoredMetrics(); // will throw since no metrics added.
     * };
     * ```
     */
    throwOnEmptyMetrics() {
        this.shouldThrowOnEmptyMetrics = true;
    }
    getCurrentDimensionsCount() {
        return Object.keys(this.dimensions).length + Object.keys(this.defaultDimensions).length;
    }
    getCustomConfigService() {
        return this.customConfigService;
    }
    getEnvVarsService() {
        return this.envVarsService;
    }
    isNewMetric(name, unit) {
        if (this.storedMetrics[name]) {
            // Inconsistent units indicates a bug or typos and we want to flag this to users early
            if (this.storedMetrics[name].unit !== unit) {
                const currentUnit = this.storedMetrics[name].unit;
                throw new Error(`Metric "${name}" has already been added with unit "${currentUnit}", but we received unit "${unit}". Did you mean to use metric unit "${currentUnit}"?`);
            }
            return false;
        }
        else {
            return true;
        }
    }
    setCustomConfigService(customConfigService) {
        this.customConfigService = customConfigService ? customConfigService : undefined;
    }
    setEnvVarsService() {
        this.envVarsService = new config_1.EnvironmentVariablesService();
    }
    setNamespace(namespace) {
        this.namespace = (namespace ||
            this.getCustomConfigService()?.getNamespace() ||
            this.getEnvVarsService().getNamespace());
    }
    setOptions(options) {
        const { customConfigService, namespace, serviceName, singleMetric, defaultDimensions } = options;
        this.setEnvVarsService();
        this.setCustomConfigService(customConfigService);
        this.setNamespace(namespace);
        this.setService(serviceName);
        this.setDefaultDimensions(defaultDimensions);
        this.isSingleMetric = singleMetric || false;
        return this;
    }
    setService(service) {
        const targetService = (service ||
            this.getCustomConfigService()?.getService() ||
            this.getEnvVarsService().getService());
        if (targetService.length > 0) {
            this.addDimension('service', targetService);
        }
    }
    storeMetric(name, unit, value) {
        if (Object.keys(this.storedMetrics).length >= MAX_METRICS_SIZE) {
            this.publishStoredMetrics();
        }
        if (this.isNewMetric(name, unit)) {
            this.storedMetrics[name] = {
                unit,
                value,
                name,
            };
        }
        else {
            const storedMetric = this.storedMetrics[name];
            if (!Array.isArray(storedMetric.value)) {
                storedMetric.value = [storedMetric.value];
            }
            storedMetric.value.push(value);
        }
    }
}
exports.Metrics = Metrics;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWV0cmljcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9NZXRyaWNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLHFDQUErRTtBQUMvRSxtQ0FTaUI7QUE0Y0MsNEZBN2NoQixtQkFBVyxPQTZjZ0I7QUExYzdCLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQzdCLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO0FBQzlCLE1BQU0saUJBQWlCLEdBQUcsbUJBQW1CLENBQUM7QUFFOUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBOERHO0FBQ0gsTUFBTSxPQUFPO0lBYVgsWUFBbUIsVUFBMEIsRUFBRTtRQVh2QyxzQkFBaUIsR0FBZSxFQUFFLENBQUM7UUFDbkMsZUFBVSxHQUFlLEVBQUUsQ0FBQztRQUc1QixnQkFBVyxHQUFZLElBQUksQ0FBQztRQUM1QixtQkFBYyxHQUFZLEtBQUssQ0FBQztRQUNoQyxhQUFRLEdBQThCLEVBQUUsQ0FBQztRQUV6Qyw4QkFBeUIsR0FBWSxLQUFLLENBQUM7UUFDM0Msa0JBQWEsR0FBa0IsRUFBRSxDQUFDO1FBR3hDLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLFlBQVksQ0FBQyxJQUFZLEVBQUUsS0FBYTtRQUM3QyxJQUFJLG1CQUFtQixJQUFJLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxFQUFFO1lBQzNELE1BQU0sSUFBSSxVQUFVLENBQUMsc0RBQXNELG1CQUFtQixFQUFFLENBQUMsQ0FBQztTQUNuRztRQUNELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7O09BR0c7SUFDSSxhQUFhLENBQUMsVUFBcUM7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